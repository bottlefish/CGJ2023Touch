//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.1
//     from Assets/Settings/InputSystem/TouchSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TouchSystem: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TouchSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TouchSystem"",
    ""maps"": [
        {
            ""name"": ""TouchPlay"",
            ""id"": ""ac9a5bf4-d6bc-43c3-bfe4-ad178ce83217"",
            ""actions"": [
                {
                    ""name"": ""TouchHold"",
                    ""type"": ""Value"",
                    ""id"": ""40fdaca9-aa6d-45f3-b71a-599908855835"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TouchPosition1"",
                    ""type"": ""PassThrough"",
                    ""id"": ""6b10bc4d-d5e2-4e33-9fef-857d2bc94327"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TouchPosition2"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d7387e5c-3fce-46c6-8746-612c80c016b9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""608d403d-d8cf-4548-ad8d-c3ec0a827e7d"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchHold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""22eb2536-991f-44cf-9207-2486349b50c5"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPosition1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4d8f0491-7ee9-4a72-a8b7-25657a9e5a9d"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPosition2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // TouchPlay
        m_TouchPlay = asset.FindActionMap("TouchPlay", throwIfNotFound: true);
        m_TouchPlay_TouchHold = m_TouchPlay.FindAction("TouchHold", throwIfNotFound: true);
        m_TouchPlay_TouchPosition1 = m_TouchPlay.FindAction("TouchPosition1", throwIfNotFound: true);
        m_TouchPlay_TouchPosition2 = m_TouchPlay.FindAction("TouchPosition2", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TouchPlay
    private readonly InputActionMap m_TouchPlay;
    private List<ITouchPlayActions> m_TouchPlayActionsCallbackInterfaces = new List<ITouchPlayActions>();
    private readonly InputAction m_TouchPlay_TouchHold;
    private readonly InputAction m_TouchPlay_TouchPosition1;
    private readonly InputAction m_TouchPlay_TouchPosition2;
    public struct TouchPlayActions
    {
        private @TouchSystem m_Wrapper;
        public TouchPlayActions(@TouchSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @TouchHold => m_Wrapper.m_TouchPlay_TouchHold;
        public InputAction @TouchPosition1 => m_Wrapper.m_TouchPlay_TouchPosition1;
        public InputAction @TouchPosition2 => m_Wrapper.m_TouchPlay_TouchPosition2;
        public InputActionMap Get() { return m_Wrapper.m_TouchPlay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchPlayActions set) { return set.Get(); }
        public void AddCallbacks(ITouchPlayActions instance)
        {
            if (instance == null || m_Wrapper.m_TouchPlayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TouchPlayActionsCallbackInterfaces.Add(instance);
            @TouchHold.started += instance.OnTouchHold;
            @TouchHold.performed += instance.OnTouchHold;
            @TouchHold.canceled += instance.OnTouchHold;
            @TouchPosition1.started += instance.OnTouchPosition1;
            @TouchPosition1.performed += instance.OnTouchPosition1;
            @TouchPosition1.canceled += instance.OnTouchPosition1;
            @TouchPosition2.started += instance.OnTouchPosition2;
            @TouchPosition2.performed += instance.OnTouchPosition2;
            @TouchPosition2.canceled += instance.OnTouchPosition2;
        }

        private void UnregisterCallbacks(ITouchPlayActions instance)
        {
            @TouchHold.started -= instance.OnTouchHold;
            @TouchHold.performed -= instance.OnTouchHold;
            @TouchHold.canceled -= instance.OnTouchHold;
            @TouchPosition1.started -= instance.OnTouchPosition1;
            @TouchPosition1.performed -= instance.OnTouchPosition1;
            @TouchPosition1.canceled -= instance.OnTouchPosition1;
            @TouchPosition2.started -= instance.OnTouchPosition2;
            @TouchPosition2.performed -= instance.OnTouchPosition2;
            @TouchPosition2.canceled -= instance.OnTouchPosition2;
        }

        public void RemoveCallbacks(ITouchPlayActions instance)
        {
            if (m_Wrapper.m_TouchPlayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITouchPlayActions instance)
        {
            foreach (var item in m_Wrapper.m_TouchPlayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TouchPlayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TouchPlayActions @TouchPlay => new TouchPlayActions(this);
    public interface ITouchPlayActions
    {
        void OnTouchHold(InputAction.CallbackContext context);
        void OnTouchPosition1(InputAction.CallbackContext context);
        void OnTouchPosition2(InputAction.CallbackContext context);
    }
}
